cmake_minimum_required(VERSION 3.0.0)
project(WBRecode)
set(ARCH x86_64)
set(TARGET_OS linux)
set(CROSS_PREFIX x86_64-unknown-linux-musl)
set(GIT_PULL git pull --recurse-submodules -j $$(nproc))
set(SCRIPTS_HOME "${CMAKE_SOURCE_DIR}/scripts")
set(DEPS "${CMAKE_SOURCE_DIR}/deps")
set(FFMPEG_HOME "${DEPS}/ffmpeg")
set(X264_HOME "${DEPS}/x264")
set(BOOST_HOME "${DEPS}/boost")
set(X264 "${X264_HOME}/libx264.a")
set(AVFORMAT "${FFMPEG_HOME}/libavformat/libavformat.a")
set(AVCODEC "${FFMPEG_HOME}/libavcodec/libavcodec.a")
set(AVUTIL "${FFMPEG_HOME}/libavutil/libavutil.a")
set(SWRESAMPLE "${FFMPEG_HOME}/libswresample/libswresample.a")
set(BOOST_FILESYSTEM "${BOOST_HOME}/stage/lib/libboost_filesystem.a")
set(BOOST_REGEX "${BOOST_HOME}/stage/lib/libboost_regex.a")
set(BOOST_SMB libs/container_hash libs/functional libs/integer libs/io libs/static_assert libs/preprocessor libs/mpl libs/smart_ptr libs/iterator libs/core libs/throw_exception libs/type_traits libs/assert libs/detail libs/system libs/predef libs/headers tools/boost_install libs/config libs/filesystem libs/regex tools/build)
set(X264_OPTS --enable-static --enable-lto --enable-pic --enable-strip --cross-prefix=${CROSS_PREFIX}-)
set(BOOST_OPTS --with-filesystem --with-regex toolset=gcc-my variant=release link=static threading=multi runtime-link=static)
set(FFMPEG_OPTS --enable-gpl --enable-small --disable-programs --disable-doc --disable-avdevice --disable-swscale --disable-postproc --disable-avfilter --disable-network --disable-dct --disable-dwt --disable-error-resilience --disable-lsp --disable-lzo --disable-mdct --disable-rdft --disable-fft --disable-faan --disable-pixelutils --disable-filters --disable-devices --disable-protocols --enable-protocol=file --disable-bsfs --enable-bsf=h264_mp4toannexb --disable-parsers --disable-muxers --enable-muxer=mp4 --disable-hwaccels --disable-encoders --enable-encoder=libx264 --enable-libx264 --arch=${ARCH} --cross-prefix=${CROSS_PREFIX}- --target-os=${TARGET_OS} --extra-cflags='-I${X264_HOME}' --extra-ldflags='-L${X264_HOME}' --enable-pic --enable-lto --disable-debug)
file(MAKE_DIRECTORY "${DEPS}")
file(GENERATE OUTPUT "${BOOST_HOME}/tools/build/src/user-config.jam" CONTENT "using gcc : my : ${CROSS_PREFIX}-g++ ;")
include_directories("${FFMPEG_HOME}")
include_directories("${BOOST_HOME}")
add_custom_command(OUTPUT "${X264_HOME}/config.h" COMMAND ./configure ${X264_OPTS} DEPENDS "${X264_HOME}/.git/FETCH_HEAD" WORKING_DIRECTORY "${X264_HOME}")
add_custom_command(OUTPUT "${X264}" COMMAND make clean COMMAND make -j4 DEPENDS "${X264_HOME}/config.h" WORKING_DIRECTORY "${X264_HOME}")
add_custom_command(OUTPUT "${X264_HOME}/.git/FETCH_HEAD" COMMAND "${SCRIPTS_HOME}/cloneOrPull.sh" "${X264_HOME}" https://code.videolan.org/videolan/x264.git stable WORKING_DIRECTORY "${DEPS}")
add_custom_target(libx264-download COMMAND ${GIT_PULL} DEPENDS "${X264_HOME}/.git/FETCH_HEAD" WORKING_DIRECTORY "${DEPS}")
add_custom_target(libx264-config DEPENDS "${X264_HOME}/config.h" "${X264_HOME}/.git/FETCH_HEAD")
add_custom_target(libx264 DEPENDS "${X264}" "${X264_HOME}/.git/FETCH_HEAD")
add_custom_command(OUTPUT "${FFMPEG_HOME}/config.h" COMMAND ./configure ${FFMPEG_OPTS} DEPENDS "${FFMPEG_HOME}/.git/FETCH_HEAD" "${X264}" WORKING_DIRECTORY "${FFMPEG_HOME}")
add_custom_command(OUTPUT "${AVUTIL}" "${AVFORMAT}" "${AVCODEC}" "${SWRESAMPLE}" COMMAND make clean COMMAND make -j4 DEPENDS "${FFMPEG_HOME}/config.h" WORKING_DIRECTORY "${FFMPEG_HOME}")
add_custom_command(OUTPUT "${FFMPEG_HOME}/.git/FETCH_HEAD" COMMAND "${SCRIPTS_HOME}/cloneOrPull.sh" "${FFMPEG_HOME}" https://git.ffmpeg.org/ffmpeg.git WORKING_DIRECTORY "${DEPS}")
add_custom_target(libav-download COMMAND ${GIT_PULL} DEPENDS "${FFMPEG_HOME}/.git/FETCH_HEAD" WORKING_DIRECTORY "${DEPS}") 
add_custom_target(libav-config DEPENDS "${FFMPEG_HOME}/config.h" "${FFMPEG_HOME}/.git/FETCH_HEAD")
add_custom_target(libav-libs DEPENDS "${AVUTIL}" "${AVFORMAT}" "${AVCODEC}" "${SWRESAMPLE}" "${FFMPEG_HOME}/.git/FETCH_HEAD")
add_custom_command(OUTPUT "${BOOST_HOME}/b2" "${BOOST_HOME}/bootstrap.log" "${BOOST_HOME}/project-config.jam" COMMAND ./bootstrap.sh DEPENDS "${BOOST_HOME}/.git/FETCH_HEAD" WORKING_DIRECTORY "${BOOST_HOME}")
add_custom_command(OUTPUT "${BOOST_FILESYSTEM}" "${BOOST_REGEX}" COMMAND ./b2 --clean COMMAND ./b2 -j4 ${BOOST_OPTS} DEPENDS "${BOOST_HOME}/b2" "${BOOST_HOME}/bootstrap.log" "${BOOST_HOME}/project-config.jam" WORKING_DIRECTORY "${BOOST_HOME}")
add_custom_command(OUTPUT "${BOOST_HOME}/.git/FETCH_HEAD" COMMAND "${SCRIPTS_HOME}/cloneOrPull.sh" "${BOOST_HOME}" https://github.com/boostorg/boost.git master ${BOOST_SMB} WORKING_DIRECTORY "${DEPS}")
add_custom_target(boost-download COMMAND ${GIT_PULL} DEPENDS "${BOOST_HOME}/.git/FETCH_HEAD" WORKING_DIRECTORY "${DEPS}")
add_custom_target(boost-config DEPENDS "${BOOST_HOME}/b2" "${BOOST_HOME}/bootstrap.log" "${BOOST_HOME}/project-config.jam" "${BOOST_HOME}/.git/FETCH_HEAD")
add_custom_target(boost DEPENDS "${BOOST_FILESYSTEM}" "${BOOST_REGEX}" "${BOOST_HOME}/.git/FETCH_HEAD")
add_executable(WBRecode WBRecode.cpp WBRecode.hpp WBRecode.c WBRecode.h)
add_dependencies(WBRecode libav-libs boost boost-download libav-download libx264-download)
target_link_libraries(WBRecode -static "${AVFORMAT}" "${AVCODEC}" "${SWRESAMPLE}" "${AVUTIL}" "${X264}" "${BOOST_FILESYSTEM}" "${BOOST_REGEX}")
